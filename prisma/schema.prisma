// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model User {
  id        String      @id   @default(cuid())
  name     String
  email     String   @unique
  password  String
  address   String?
  role      Role   @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carts     Cart[]
  orders    Order[]
}

enum Role {
  USER
  ADMIN
}

model Category {
  id        Int      @id   @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  parentId  Int @default(0)
  Products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product{
  id          Int      @id   @default(autoincrement())
  name        String
  slug        String   @unique
  description String
  price       Int
  stock       Int      @default(0)
  categoryId  Int
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  carts       Cart[]
  orderItems  OrderItem[]
}

model Cart{
  userId String
  productId Int
  quantity Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete:  Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@unique([userId, productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id Int @id @default(autoincrement())
  userId String
  total Float
  status OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address String
  items OrderItem[]
  paymentId String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id Int @id @default(autoincrement())
  orderId Int
  productId Int
  quantity Int @default(1)
  price Float

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
